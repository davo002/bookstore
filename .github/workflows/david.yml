name: CI Pipeline - Build, Scan, Push & Deploy

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  build-scan-push-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Authenticate with AWS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      # Ensure ECR repositories exist
      - name: Ensure ECR Repositories Exist
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REPOSITORIES: "server client nginx"
        run: |
          for REPO in $ECR_REPOSITORIES; do
            aws ecr describe-repositories --repository-names $REPO || \
            aws ecr create-repository --repository-name $REPO
          done

      # Build Docker images
      - name: Build Docker Images
        run: |
          docker build -f server/Dockerfile.dev -t bookstore_server:latest server
          docker build -f client/Dockerfile.dev -t bookstore_client:latest client
          docker build -f nginx/Dockerfile.dev -t bookstore_nginx:latest nginx

      # Scan Docker images with Trivy
      - name: Scan Docker Images with Trivy
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: bookstore_server:latest
          format: 'table'
          ignore-unfixed: true

      - uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: bookstore_client:latest
          format: 'table'
          ignore-unfixed: true

      - uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: bookstore_nginx:latest
          format: 'table'
          ignore-unfixed: true

      # Tag and Push Images to ECR
      - name: Tag and Push Images
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          for REPO in server client nginx; do
            IMAGE_NAME="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO:latest"
            docker tag bookstore_$REPO:latest $IMAGE_NAME
            docker push $IMAGE_NAME
          done

      # Copy docker-compose.yml to EC2 instance
      - name: Copy docker-compose.yml to EC2
        env:
          INSTANCE_IP: ${{ secrets.INSTANCE_IP }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          scp -o StrictHostKeyChecking=no -i private_key.pem docker-compose.yml ubuntu@$INSTANCE_IP:/home/ubuntu/
          rm -f private_key.pem

      - name: Deploy and Run docker-compose on EC2
        env:
          INSTANCE_IP: ${{ secrets.INSTANCE_IP }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$INSTANCE_IP << 'EOF'
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
            export AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}
            export AWS_REGION=${AWS_REGION}
            cd /home/ubuntu
            docker-compose down
            docker-compose pull
            docker-compose up -d
          EOF
      
          rm -f private_key.pem

